using System;
using System.Threading;

namespace CSharpLearningApp
{
    public static class History
    {
        public static void RunLesson()
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Yellow;
            for (int i = 0; i <= 100; i += 5)
            {
                Console.SetCursorPosition(0, Console.CursorTop);
                Console.Write($"Завантаження: {i}%");
                Thread.Sleep(50);
            }

            // Заголовок теми
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\n-------------------------------------------------------------------");
            Console.WriteLine("\nТема 1. Історія мов програмування");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\n-------------------------------------------------------------------");
            Console.WriteLine("\n");
            Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.White;

            // Теоретичний матеріал
            Console.WriteLine("    Історія мов програмування та розвиток C# є захоплюючою подорожжю через етапи еволюції обчислювальної техніки, від перших спроб спілкування з машинами до створення сучасних універсальних мов, які формують цифровий світ. Мови програмування виникли як спосіб спростити взаємодію людини з комп’ютером, дозволяючи розробникам створювати складні програми без необхідності занурюватися в деталі апаратного забезпечення. C#, розроблений Microsoft на початку 2000-х, став однією з ключових мов сучасності, увібравши в себе найкращі ідеї попередників і адаптувавшись до потреб розробки 21-го століття.");
            Console.WriteLine("    На зорі комп’ютерної ери, у 1940–1950-х роках, програмування було трудомістким процесом. Програмісти використовували машинний код — послідовності двійкових чисел, які безпосередньо керували апаратним забезпеченням. Це було складно і вимагало глибокого розуміння архітектури комп’ютера. Згодом з’явилися асемблери, які замінили бінарні інструкції мнемонічними командами, полегшуючи написання програм. Першим проривом у високорівневих мовах став Фортран, створений у 1957 році компанією IBM. Він дозволив ученим виконувати складні математичні обчислення, відійшовши від низькорівневих деталей. Незабаром з’явився COBOL (1959), орієнтований на бізнес-додатки, з акцентом на читабельність коду. ALGOL (1960) заклав основи структурного програмування, вплинувши на синтаксис багатьох сучасних мов.");
            Console.WriteLine("    У 1960–1970-х роках акцент змістився на структуроване програмування, яке сприяло створенню більш організованого та зрозумілого коду. Мова C, розроблена Деннісом Рітчі в 1972 році в Bell Labs, стала справжнім проривом. Вона поєднувала швидкість і гнучкість низькорівневого програмування з відносною простотою високорівневих мов. C стала основою для багатьох операційних систем, зокрема UNIX. Водночас Ніклаус Вірт створив Pascal (1970), який використовувався для навчання програмуванню завдяки чіткій структурі та акценту на типізації.");
            Console.WriteLine("    1980-ті роки принесли нову парадигму — об’єктно-орієнтоване програмування (ООП). Smalltalk (1980) запровадив концепції класів, об’єктів і спадкування, які стали стандартом для сучасних мов. C++ (1983), створений Б’ярном Страуструпом, розширив можливості C, додавши ООП і ставши популярним для системного та прикладного програмування. У 1995 році Sun Microsystems представила Java, яка завдяки платформній незалежності та простоті швидко завоювала популярність у веб- і корпоративній розробці.");
            Console.WriteLine("    На цьому тлі з’явився C#, створений Microsoft як відповідь на успіх Java та потребу в універсальній мові для нової платформи .NET. Розробку очолив Андерс Хейлсберг, відомий за Turbo Pascal і Delphi. У 2000 році Microsoft анонсувала C# разом із .NET Framework, а офіційний реліз відбувся у 2002 році. C# 1.0 мав синтаксис, схожий на C і C++, але був безпечнішим і простішим у використанні. Завдяки автоматичному керуванню пам’яттю (Garbage Collection) і тісній інтеграції з .NET, він став ідеальним для створення Windows-додатків, веб-сервісів і серверних рішень.");
            Console.WriteLine("    C# швидко еволюціонував. У 2005 році C# 2.0 додав узагальнення (generics), які підвищили типобезпечність і гнучкість коду. У 2007 році C# 3.0 представив LINQ, що спростило роботу з даними, а також лямбда-вирази та автоматичні властивості. C# 4.0 (2010) додав динамічну типізацію та підтримку паралельного програмування. У 2012 році C# 5.0 запровадив асинхронне програмування з ключовими словами async і await, що стало революційним для створення масштабованих додатків. Подальші версії (6.0–12.0, 2015–2023) додали нульові типи, рекорди, покращений синтаксис і підтримку функціонального програмування. У 2024 році C# 13.0 приніс оптимізації для AI та машинного навчання, а також покращення в асинхронному програмуванні.");
            Console.WriteLine("    Ключовим моментом у розвитку C# стала поява .NET Core у 2016 році, яка зробила мову кросплатформенною, дозволяючи розробку для Windows, macOS і Linux. Сьогодні C# використовується в різних сферах: від створення ігор у Unity (де він є основною мовою) до веб-розробки з ASP.NET, мобільних додатків із Xamarin/.NET MAUI та хмарних рішень на Azure. Завдяки багатопарадигмовості, що поєднує ООП, функціональне та асинхронне програмування, C# залишається універсальним інструментом. Його сильна типізація, продуктивність і потужна екосистема, включаючи Visual Studio, роблять мову популярною серед розробників у всьому світі.");

            // Навігація
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\n-------------------------------------------------------------------");
            Console.ResetColor();
            Console.WriteLine("\n[0] <- Назад до ЗМІСТу");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\n-------------------------------------------------------------------");
            Console.ResetColor();
            Console.Write("\nТвій вибір: \n");
            while (true)
            {
                string input = Console.ReadLine()?.Trim();
                if (input == "0")
                {
                    break;
                }
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Введіть 0!");
                Console.ResetColor();
                Thread.Sleep(600);
            }
        }
    }
}
